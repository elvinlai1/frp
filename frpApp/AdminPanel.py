# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'AdminPanel.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

from PyQt5.QtCore import pyqtSignal, pyqtSlot, Qt, QThread
from PyQt5.QtGui import QPixmap
import sys
import numpy as np
import face_recognition

### hack job to designate qt cv2 plugin 
import os
from PyQt5.QtCore import QLibraryInfo
# from PySide2.QtCore import QLibraryInfo
import cv2

from Database import Database
os.environ["QT_QPA_PLATFORM_PLUGIN_PATH"] = QLibraryInfo.location(
    QLibraryInfo.PluginsPath
)

from Database import *
import pickle

class VideoThread(QThread):
    change_pixmap_signal = pyqtSignal(np.ndarray)

    def __init__(self):
        super().__init__()
        self._run_flag = True

    def run(self):
        cap = cv2.VideoCapture(0)
        while self._run_flag:
            ret, cv_img = cap.read()
            if ret:  
                self.change_pixmap_signal.emit(cv_img)
        # shut down capture system
        cap.release()

    def stop(self):
        """Sets run flag to False and waits for thread to finish"""
        self._run_flag = False
        self.wait()


class Ui_AdminPanel(object):
    def setupUi(self, AdminPanel):
        AdminPanel.setObjectName("AdminPanel")
        AdminPanel.setWindowModality(QtCore.Qt.NonModal)
        AdminPanel.resize(365, 417)
        self.centralwidget = QtWidgets.QWidget(AdminPanel)
        self.centralwidget.setObjectName("centralwidget")
        self.firstNameLbl = QtWidgets.QLabel(self.centralwidget)
        self.firstNameLbl.setGeometry(QtCore.QRect(20, 208, 165, 18))
        self.firstNameLbl.setObjectName("firstNameLbl")
        self.lastNameLbl = QtWidgets.QLabel(self.centralwidget)
        self.lastNameLbl.setGeometry(QtCore.QRect(20, 240, 165, 18))
        self.lastNameLbl.setObjectName("lastNameLbl")
        self.btnRegister = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: self.register())
        self.btnRegister.setGeometry(QtCore.QRect(10, 280, 351, 26))
        self.btnRegister.setObjectName("btnRegister")
        self.empFirstNameTxt = QtWidgets.QLineEdit(self.centralwidget)
        self.empFirstNameTxt.setGeometry(QtCore.QRect(190, 200, 159, 26))
        self.empFirstNameTxt.setObjectName("empFirstNameTxt")
        self.empLastNameTxt = QtWidgets.QLineEdit(self.centralwidget)
        self.empLastNameTxt.setGeometry(QtCore.QRect(190, 230, 159, 26))
        self.empLastNameTxt.setObjectName("empLastNameTxt")
        self.statusTxtBox = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.statusTxtBox.setGeometry(QtCore.QRect(10, 320, 351, 81))
        self.statusTxtBox.setAutoFillBackground(False)
        self.statusTxtBox.setFrameShape(QtWidgets.QFrame.Box)
        self.statusTxtBox.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.statusTxtBox.setReadOnly(True)
        self.statusTxtBox.setObjectName("statusTxtBox")
        self.empNumLbl = QtWidgets.QLabel(self.centralwidget)
        self.empNumLbl.setGeometry(QtCore.QRect(20, 176, 144, 18))
        self.empNumLbl.setObjectName("empNumLbl")
        self.empNumTxt = QtWidgets.QLineEdit(self.centralwidget)
        self.empNumTxt.setGeometry(QtCore.QRect(190, 170, 159, 26))
        self.empNumTxt.setObjectName("empNumTxt")
        self.image_lbl = QtWidgets.QLabel(self.centralwidget)
        self.image_lbl.setGeometry(QtCore.QRect(110, 10, 150, 150))
        self.image_lbl.setFrameShape(QtWidgets.QFrame.Box)
        self.image_lbl.setText("")
        self.image_lbl.setObjectName("image_lbl")
        AdminPanel.setCentralWidget(self.centralwidget)

        self.retranslateUi(AdminPanel)
        QtCore.QMetaObject.connectSlotsByName(AdminPanel)

        # create the video capture thread
        self.thread = VideoThread()
        # connect its signal to the update_image slot
        self.thread.change_pixmap_signal.connect(self.update_image)
        # start the thread
        self.thread.start()

    


    def retranslateUi(self, AdminPanel):
        _translate = QtCore.QCoreApplication.translate
        AdminPanel.setWindowTitle(_translate("AdminPanel", "Admin Panel"))
        self.firstNameLbl.setText(_translate("AdminPanel", "Employee First Name:"))
        self.lastNameLbl.setText(_translate("AdminPanel", "Employee Last Name:"))
        self.btnRegister.setText(_translate("AdminPanel", "Register"))
        self.empNumLbl.setText(_translate("AdminPanel", "Employee Number:"))

    def closeEvent(self, event):
        self.thread.stop()
        event.accept()

    @pyqtSlot(np.ndarray)
    def update_image(self, cv_img):
        """ Updates the image_label with a new opencv image """
        qt_img = self.convert_cv_qt(cv_img)
        self.image_lbl.setPixmap(qt_img)
    
    
    def convert_cv_qt(self, cv_img):
        """ Convert from an opencv image to QPixmap """

        global face_image
        global face_locations
        global rgb_small_frame

        small_frame = cv2.resize(cv_img, (0, 0), fx=0.25, fy=0.25)
        rgb_small_frame = cv2.cvtColor(small_frame, cv2.COLOR_BGR2RGB)
        face_locations = face_recognition.face_locations(rgb_small_frame)

        if face_locations: 
            face_l = face_locations[0]
            top, right, bottom, left = face_l
            top*=4
            right*=4
            bottom*=4
            left*=4
            face_image = cv_img[top:bottom, left:right]
            face_image = cv2.resize(face_image, (300, 300))
        else:
            face_image = cv_img

        #final output frame logic to Qt readable
        rgb_image = cv2.cvtColor(face_image, cv2.COLOR_BGR2RGB)
        h, w, ch = rgb_image.shape
        bytes_per_line = ch * w
        convert_to_Qt_format = QtGui.QImage(rgb_image.data, w, h, bytes_per_line, QtGui.QImage.Format_RGB888)
        p = convert_to_Qt_format.scaled(150, 150, Qt.KeepAspectRatio)
        return QPixmap.fromImage(p)
    
    def register(self):
        cv2.imwrite('img.jpg', face_image)
        face_encodings = face_recognition.face_encodings(rgb_small_frame, face_locations)

        #addNewEmployee
        empName = self.empFirstNameTxt.text() + " " + self.empLastNameTxt.text()
        empNum = self.empNumTxt.text()
        
        db = Database()

        db.registerNewFace(empNum.strip(),empName.strip(),face_encodings)

        self.statusTxtBox.setPlainText('Employee Name: ' + empName + '\n' + 'Employee Number: ' + empNum + '\n' + empName + ' has been registered in the database')


class AdminPanel(QtWidgets.QMainWindow, Ui_AdminPanel):
    def __init__(self, parent=None):
        super(AdminPanel, self).__init__(parent)
        self.setupUi(self)
        
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    a = AdminPanel()
    a.show()
    sys.exit(app.exec_())
