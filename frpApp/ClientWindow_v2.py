# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ClientWindow_test2.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from AdminPanel_v2 import Ui_AdminPanel

from PyQt5.QtCore import pyqtSignal, pyqtSlot, Qt, QThread
from PyQt5.QtGui import QPixmap
import sys
import numpy as np
import face_recognition
from datetime import datetime, timedelta
from Database import *
import time

### hack job to designate qt cv2 plugin 
import os
from PyQt5.QtCore import QLibraryInfo
# from PySide2.QtCore import QLibraryInfo
import cv2
os.environ["QT_QPA_PLATFORM_PLUGIN_PATH"] = QLibraryInfo.location(
    QLibraryInfo.PluginsPath
)

class VideoThread(QThread):
    change_pixmap_signal = pyqtSignal(np.ndarray)

    def __init__(self):
        super().__init__()
        self._run_flag = True

    def run(self):
        cap = cv2.VideoCapture(0)
        while self._run_flag:
            ret, cv_img = cap.read()
            if ret:  
                self.change_pixmap_signal.emit(cv_img)
        # shut down capture system
        cap.release()

    def stop(self):
        """Sets run flag to False and waits for thread to finish"""
        self._run_flag = False
        self.wait()

class Ui_ClientWindow(object):
    def openAdminPanel(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_AdminPanel()
        self.ui.setupUi(self.window)
        self.window.show()

    def setupUi(self, ClientWindow):
        ClientWindow.setObjectName("ClientWindow")
        ClientWindow.setEnabled(True)
        ClientWindow.resize(816, 800)
        font = QtGui.QFont()
        font.setFamily("DejaVu Sans")
        font.setPointSize(11)
        ClientWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(ClientWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.image_label = QtWidgets.QLabel(self.centralwidget)
        self.image_label.setGeometry(QtCore.QRect(90, 150, 640, 480))
        self.image_label.setMouseTracking(False)
        self.image_label.setAutoFillBackground(False)
        self.image_label.setFrameShape(QtWidgets.QFrame.Box)
        self.image_label.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.image_label.setMidLineWidth(1)
        self.image_label.setText("")
        self.image_label.setTextFormat(QtCore.Qt.PlainText)
        self.image_label.setObjectName("image_label")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.openAdminPanel())
        self.pushButton.setGeometry(QtCore.QRect(670, 690, 94, 51))
        font = QtGui.QFont()
        font.setFamily("Sans")
        font.setPointSize(12)
        font.setItalic(False)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit.setGeometry(QtCore.QRect(230, 50, 361, 70))
        font = QtGui.QFont()
        font.setFamily("DejaVu Sans")
        font.setPointSize(30)
        font.setBold(True)
        font.setWeight(75)
        self.plainTextEdit.setFont(font)
        self.plainTextEdit.setReadOnly(True)
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.plainTextEdit_2 = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit_2.setGeometry(QtCore.QRect(220, 670, 361, 70))
        font = QtGui.QFont()
        font.setFamily("DejaVu Sans")
        font.setPointSize(13)
        self.plainTextEdit_2.setFont(font)
        self.plainTextEdit_2.setReadOnly(True)
        self.plainTextEdit_2.setObjectName("plainTextEdit_2")
        ClientWindow.setCentralWidget(self.centralwidget)
        self.menuBar = QtWidgets.QMenuBar(ClientWindow)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 816, 23))
        self.menuBar.setObjectName("menuBar")
        self.menuAdmin = QtWidgets.QMenu(self.menuBar)
        self.menuAdmin.setObjectName("menuAdmin")
        ClientWindow.setMenuBar(self.menuBar)
        self.actionRegister_New_Employee = QtWidgets.QAction(ClientWindow)
        self.actionRegister_New_Employee.setObjectName("actionRegister_New_Employee")
        self.menuAdmin.addAction(self.actionRegister_New_Employee)
        self.menuBar.addAction(self.menuAdmin.menuAction())

        self.retranslateUi(ClientWindow)
        QtCore.QMetaObject.connectSlotsByName(ClientWindow)

        #load database of face encodings with employee name and number
        self.load_faces()
        # create the video capture thread
        self.thread = VideoThread()
        # connect its signal to the update_image slot
        self.thread.change_pixmap_signal.connect(self.update_image)
        # start the thread
        self.thread.start()

    def retranslateUi(self, ClientWindow):
        _translate = QtCore.QCoreApplication.translate
        ClientWindow.setWindowTitle(_translate("ClientWindow", "MainWindow"))
        self.pushButton.setText(_translate("ClientWindow", "Admin"))
        self.plainTextEdit.setPlainText(_translate("ClientWindow", "12:00PM/AM"))
        self.plainTextEdit_2.setPlainText(_translate("ClientWindow", "Hello [Employee] You\'ve logged in at [Time]"))
        self.menuAdmin.setTitle(_translate("ClientWindow", "Admin"))
        self.actionRegister_New_Employee.setText(_translate("ClientWindow", "Register New Employee"))

    def closeEvent(self, event):
        self.thread.stop()
        event.accept()
    
    def load_faces(self):
        db = Database()
        global all_empFaces
        global extract_empFaces
        all_empFaces = db.getAllFaces()
        empFaces = []
        for faces in all_empFaces:
            empFaces.append(faces[2])
        extract_empFaces =  []
        for faces in empFaces:
            extract_empFaces.append(faces[0])

    def mark_face(self, face_l, cv_img, color):
        top, right, bottom, left = face_l
        top*=4
        right*=4
        bottom*=4
        left*=4
        cv2.rectangle(cv_img, (left, top), (right, bottom), color, 2)

    def findEmployeeName(self, face):
        match = face_recognition.compare_faces(extract_empFaces, face, 0.6)
        if True in match: 
            matched_empData = all_empFaces[match.index(True)]
            empNum = matched_empData[0]
            empName = matched_empData[1]
            #
            #print (empNum+" \n"+ empName)

    def lookupFace(self, face):
        face_distances = face_recognition.face_distance(extract_empFaces, face)
        best_match_index = np.argmin(face_distances)
        if face_distances[best_match_index] < 0.65:
            return True

    @pyqtSlot(np.ndarray)
    def update_image(self, cv_img):
        """ Updates the image_label with a new opencv image """
        
        #face detection frame logic
        small_frame = cv2.resize(cv_img, (0, 0), fx=0.25, fy=0.25)
        rgb_small_frame = cv2.cvtColor(small_frame, cv2.COLOR_BGR2RGB)
        face_locations = face_recognition.face_locations(rgb_small_frame)

        if face_locations: 
            #unpacks the list
            face_loc = face_locations[0]
            face_encoding = face_recognition.face_encodings(rgb_small_frame, face_locations)
            if(self.lookupFace(face_encoding[0])):
                green = (75,140,97)
                self.mark_face(face_loc, cv_img, green)
                self.findEmployeeName(face_encoding[0])
            else:
                red = (0,0,255) 
                self.mark_face(face_loc, cv_img, red)
                
        qt_img = self.convert_cv_qt(cv_img)
        self.image_label.setPixmap(qt_img)

    def convert_cv_qt(self, cv_img):
        """ Convert from an opencv image to QPixmap """
        #final output frame logic to Qt readable
        rgb_image = cv2.cvtColor(cv_img, cv2.COLOR_BGR2RGB)
        h, w, ch = rgb_image.shape
        bytes_per_line = ch * w
        convert_to_Qt_format = QtGui.QImage(rgb_image.data, w, h, bytes_per_line, QtGui.QImage.Format_RGB888)
        p = convert_to_Qt_format.scaled(640, 480, Qt.KeepAspectRatio)
        return QPixmap.fromImage(p)

class ClientWindow(QtWidgets.QMainWindow, Ui_ClientWindow):
    def __init__(self, parent=None):
        super(ClientWindow, self).__init__(parent)
        self.setupUi(self)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    a = ClientWindow()
    a.show()
    sys.exit(app.exec_())
