# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ClientWindow_test.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from re import A
from PyQt5 import QtCore, QtGui, QtWidgets

from PyQt5.QtCore import pyqtSignal, pyqtSlot, Qt, QThread
from PyQt5.QtGui import QPixmap
import sys
import numpy as np
import face_recognition
from datetime import datetime, timedelta

### hack job to designate qt cv2 plugin 
import os
from PyQt5.QtCore import QLibraryInfo
# from PySide2.QtCore import QLibraryInfo
import cv2
os.environ["QT_QPA_PLATFORM_PLUGIN_PATH"] = QLibraryInfo.location(
    QLibraryInfo.PluginsPath
)


class VideoThread(QThread):
    change_pixmap_signal = pyqtSignal(np.ndarray)

    def __init__(self):
        super().__init__()
        self._run_flag = True

    def run(self):
        cap = cv2.VideoCapture(2)
        while self._run_flag:
            ret, cv_img = cap.read()
            if ret:  
                self.change_pixmap_signal.emit(cv_img)
        # shut down capture system
        cap.release()

    def stop(self):
        """Sets run flag to False and waits for thread to finish"""
        self._run_flag = False
        self.wait()

class Ui_ClientWindow(object):
    known_face_encodings = []
    known_face_metadata = []

    def setupUi(self, ClientWindow):
        super().__init__()
        ClientWindow.setObjectName("ClientWindow")
        ClientWindow.setEnabled(True)
        ClientWindow.resize(1280, 720)
        self.centralwidget = QtWidgets.QWidget(ClientWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.image_label = QtWidgets.QLabel(self.centralwidget)
        self.image_label.setGeometry(QtCore.QRect(580, 100, 640, 480))

        ClientWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(ClientWindow)
        QtCore.QMetaObject.connectSlotsByName(ClientWindow)

        # create the video capture thread
        self.thread = VideoThread()
        # connect its signal to the update_image slot
        self.thread.change_pixmap_signal.connect(self.update_image)
        # start the thread
        self.thread.start()

    def retranslateUi(self, ClientWindow):
        _translate = QtCore.QCoreApplication.translate
        ClientWindow.setWindowTitle(_translate("ClientWindow", "MainWindow"))

    def closeEvent(self, event):
        self.thread.stop()
        event.accept()

    def mark_face(self, face_l, cv_img):
        top, right, bottom, left = face_l
        top*=4
        right*=4
        bottom*=4
        left*=4
        cv2.rectangle(cv_img, (left, top), (right, bottom), (0, 0, 255), 2)

    @pyqtSlot(np.ndarray)
    def update_image(self, cv_img):
        """ Updates the image_label with a new opencv image """
        qt_img = self.convert_cv_qt(cv_img)
        self.image_label.setPixmap(qt_img)
    
    def convert_cv_qt(self, cv_img):
        """ Convert from an opencv image to QPixmap """

        #face detection frame logic
        #resize frame for faster face detection could be changed/removed for better results? 
        small_frame = cv2.resize(cv_img, (0, 0), fx=0.25, fy=0.25)
        #convert COLOR_BGR2RGB for face_recognition library to read
        rgb_small_frame = cv2.cvtColor(small_frame, cv2.COLOR_BGR2RGB)
        face_locations = face_recognition.face_locations(rgb_small_frame)
        #face_encodings = face_recognition.face_encodings(rgb_small_frame, face_locations)

        #if face is detected add square around face
        if face_locations: 
            #unpacks the list
            face_l = face_locations[0]
            self.mark_face(face_l, cv_img)
            #compareFace()
            #saveFaceImg()?

    
        #final output frame logic to Qt readable
        rgb_image = cv2.cvtColor(cv_img, cv2.COLOR_BGR2RGB)
        h, w, ch = rgb_image.shape
        bytes_per_line = ch * w
        convert_to_Qt_format = QtGui.QImage(rgb_image.data, w, h, bytes_per_line, QtGui.QImage.Format_RGB888)
        p = convert_to_Qt_format.scaled(480, 640, Qt.KeepAspectRatio)
        return QPixmap.fromImage(p)

class ClientWindow(QtWidgets.QMainWindow, Ui_ClientWindow):
    def __init__(self, parent=None):
        super(ClientWindow, self).__init__(parent)
        self.setupUi(self)
        


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    a = ClientWindow()
    a.show()
    sys.exit(app.exec_())
